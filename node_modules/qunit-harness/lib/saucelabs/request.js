'use strict';

var _createClass = require('babel-runtime/helpers/create-class').default;

var _classCallCheck = require('babel-runtime/helpers/class-call-check').default;

var _regeneratorRuntime = require('babel-runtime/regenerator').default;

var _interopRequireDefault = require('babel-runtime/helpers/interop-require-default').default;

exports.__esModule = true;

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _request2 = require('request');

var _request3 = _interopRequireDefault(_request2);

var _pify = require('pify');

var _pify2 = _interopRequireDefault(_pify);

var requestPromised = _pify2.default(_request3.default, _pinkie2.default);

var SaucelabsRequestAdapter = (function () {
    function SaucelabsRequestAdapter(user, pass) {
        _classCallCheck(this, SaucelabsRequestAdapter);

        this.user = user;
        this.pass = pass;
    }

    SaucelabsRequestAdapter.prototype._request = function _request(params) {
        var result, statusCode, body;
        return _regeneratorRuntime.async(function _request$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
                case 0:
                    context$2$0.next = 2;
                    return _regeneratorRuntime.awrap(requestPromised(params));

                case 2:
                    result = context$2$0.sent;
                    statusCode = result.statusCode;
                    body = result.body;

                    if (!(statusCode === 200)) {
                        context$2$0.next = 7;
                        break;
                    }

                    return context$2$0.abrupt('return', body);

                case 7:
                    throw ['Unexpected response from the Sauce Labs API.', params.method + ' ' + params.url, 'Response status: ' + statusCode, 'Body: ' + JSON.stringify(body)].join('\n');

                case 8:
                case 'end':
                    return context$2$0.stop();
            }
        }, null, this);
    };

    SaucelabsRequestAdapter.prototype.put = function put(url, data) {
        var params;
        return _regeneratorRuntime.async(function put$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
                case 0:
                    params = {
                        method: 'PUT',
                        uri: ['https://', this.user, ':', this.pass, '@saucelabs.com/rest', url].join(''),
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data)
                    };
                    context$2$0.next = 3;
                    return _regeneratorRuntime.awrap(this._request(params));

                case 3:
                    return context$2$0.abrupt('return', context$2$0.sent);

                case 4:
                case 'end':
                    return context$2$0.stop();
            }
        }, null, this);
    };

    SaucelabsRequestAdapter.prototype.get = function get(url) {
        var params, body;
        return _regeneratorRuntime.async(function get$(context$2$0) {
            while (1) switch (context$2$0.prev = context$2$0.next) {
                case 0:
                    params = {
                        method: 'GET',
                        uri: 'https://saucelabs.com/rest/v1.1/users/' + this.user + '/' + url,
                        headers: { 'Content-Type': 'application/json' },
                        auth: { user: this.user, pass: this.pass }
                    };
                    context$2$0.next = 3;
                    return _regeneratorRuntime.awrap(this._request(params));

                case 3:
                    body = context$2$0.sent;
                    return context$2$0.abrupt('return', JSON.parse(body));

                case 5:
                case 'end':
                    return context$2$0.stop();
            }
        }, null, this);
    };

    _createClass(SaucelabsRequestAdapter, null, [{
        key: 'URLS',
        value: {
            RUN: 'js-tests',
            STATUS: 'js-tests/status',
            STOP_JOB: function (jobId) {
                return 'jobs/' + jobId + '/stop';
            },
            CONCURRENCY: 'concurrency'
        },
        enumerable: true
    }]);

    return SaucelabsRequestAdapter;
})();

exports.default = SaucelabsRequestAdapter;
module.exports = exports.default;