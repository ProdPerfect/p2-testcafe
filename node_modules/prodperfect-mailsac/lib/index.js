'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _config = require('../config.json');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_axios2.default.defaults.headers.common['Mailsac-Key'] = _config2.default.API_KEY;

var MailBox = function () {
  function MailBox() {
    (0, _classCallCheck3.default)(this, MailBox);

    this.baseUrl = _config2.default.baseUrl;
    this.currentTimeStamp = new Date().getTime();
    this.emailAddress = '';
  }

  /**
   * Creates a new (random) email address
   *
   * @param {string} [customerName='ProdPerfect'] Customer name
   * @returns {string} email
   * @memberof MailBox
   */


  (0, _createClass3.default)(MailBox, [{
    key: 'createEmailAddress',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var customerName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'ProdPerfect';

        var randomId, emailAddress, _ref2, _ref2$data, available, email;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                randomId = Math.random().toString(36).replace(/[^a-z]/g, '');
                emailAddress = customerName.substring(0, 2).toLowerCase() + '_' + randomId + '@prodp.msdc.co';
                _context.next = 5;
                return _axios2.default.get(this.baseUrl + '/addresses/' + emailAddress + '/availability');

              case 5:
                _ref2 = _context.sent;
                _ref2$data = _ref2.data;
                available = _ref2$data.available;
                email = _ref2$data.email;

                if (!available) {
                  _context.next = 12;
                  break;
                }

                this.emailAddress = email;
                return _context.abrupt('return', email);

              case 12:
                throw new Error('email address not available, try again');

              case 15:
                _context.prev = 15;
                _context.t0 = _context['catch'](0);
                throw new Error('error validating email', _context.t0);

              case 18:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 15]]);
      }));

      function createEmailAddress() {
        return _ref.apply(this, arguments);
      }

      return createEmailAddress;
    }()

    /**
     * Get the first mail matching the subjectQuery provided
     *
     * @param {string} [subjectQuery=''] A partial or complete mail subject
     * @param {object} [t={ wait: (time) => Promise.resolve(time) }] t object from testcafe
     * @returns {object} mail An object representation of the mail
     * @memberof MailBox
     */

  }, {
    key: 'getInbox',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
        var subjectQuery = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

        var _this = this;

        var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : { wait: function wait(time) {
            return _promise2.default.resolve(time);
          } };
        var emailAddress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.emailAddress;

        var foundEmail, tries, _ref4, data;

        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                foundEmail = null;
                tries = 0;
                _context2.prev = 2;

              case 3:
                if (!(foundEmail == null && tries < 25)) {
                  _context2.next = 15;
                  break;
                }

                _context2.next = 6;
                return t.wait(5000);

              case 6:
                _context2.next = 8;
                return _axios2.default.get(this.baseUrl + '/addresses/' + emailAddress + '/messages');

              case 8:
                _ref4 = _context2.sent;
                data = _ref4.data;


                if (data.length > 0) {
                  foundEmail = data.find(function (email) {
                    var re = new RegExp(subjectQuery, 'i');
                    return email.subject.match(re) && new Date(email.received).getTime() > _this.currentTimeStamp;
                  });
                }

                tries++;
                console.log('Fetching emails tries: ', tries);
                _context2.next = 3;
                break;

              case 15:
                _context2.next = 20;
                break;

              case 17:
                _context2.prev = 17;
                _context2.t0 = _context2['catch'](2);
                throw new Error('error fetching mails', _context2.t0);

              case 20:
                return _context2.abrupt('return', foundEmail);

              case 21:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[2, 17]]);
      }));

      function getInbox() {
        return _ref3.apply(this, arguments);
      }

      return getInbox;
    }()

    /**
     * Get the content of the mail
     *
     * @param {string} mailId Id of the mail to read
     * @param {boolean} [deleteMail=false] A flag specify mail should be deleted after
     * @param {string} [mode='dirty'] On off 'dirty' (html version) or 'text' (plain text version)
     * @returns {string} message
     * @memberof MailBox
     */

  }, {
    key: 'getMail',
    value: function () {
      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(mailId) {
        var deleteMail = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var emailAddress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.emailAddress;
        var mode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'dirty';

        var _ref6, message;

        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.prev = 0;
                _context3.next = 3;
                return _axios2.default.get(this.baseUrl + '/' + mode + '/' + emailAddress + '/' + mailId);

              case 3:
                _ref6 = _context3.sent;
                message = _ref6.data;
                return _context3.abrupt('return', message);

              case 8:
                _context3.prev = 8;
                _context3.t0 = _context3['catch'](0);
                throw new Error('error fetching mail', _context3.t0);

              case 11:
                _context3.prev = 11;
                _context3.t1 = deleteMail;

                if (!_context3.t1) {
                  _context3.next = 16;
                  break;
                }

                _context3.next = 16;
                return this.deleteMail(mailId, emailAddress);

              case 16:
                return _context3.finish(11);

              case 17:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this, [[0, 8, 11, 17]]);
      }));

      function getMail(_x5) {
        return _ref5.apply(this, arguments);
      }

      return getMail;
    }()

    /**
     * Delete a mail message
     *
     * @param {string} mailId
     * @returns null
     * @memberof MailBox
     */

  }, {
    key: 'deleteMail',
    value: function () {
      var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(mailId) {
        var emailAddress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.emailAddress;
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.prev = 0;
                return _context4.abrupt('return', _axios2.default.delete(this.baseUrl + '/addresses/' + emailAddress + '/messages/' + mailId));

              case 4:
                _context4.prev = 4;
                _context4.t0 = _context4['catch'](0);
                throw new Error('error deleting mail', _context4.t0);

              case 7:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this, [[0, 4]]);
      }));

      function deleteMail(_x9) {
        return _ref7.apply(this, arguments);
      }

      return deleteMail;
    }()

    /**
     * Get all mails in the box - Good for debugging purposes
     *
     * @param {object} [t={ wait: (time) => Promise.resolve(time) }] t object from testcafe
     * @param {string} [size=20] Number of mails to return <last n-size>
     * @returns {object} mail An object representation of the mail
     * @memberof MailBox
     */

  }, {
    key: 'getAll',
    value: function () {
      var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
        var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : { wait: function wait(time) {
            return _promise2.default.resolve(time);
          } };
        var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 20;
        var emailAddress = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.emailAddress;

        var foundMails, tries, _ref9, data;

        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                foundMails = [];
                tries = 0;
                _context5.prev = 2;

              case 3:
                if (!(foundMails.length === 0 && tries < 25)) {
                  _context5.next = 15;
                  break;
                }

                _context5.next = 6;
                return t.wait(5000);

              case 6:
                _context5.next = 8;
                return _axios2.default.get(this.baseUrl + '/addresses/' + emailAddress + '/messages');

              case 8:
                _ref9 = _context5.sent;
                data = _ref9.data;


                if (data.length > 0) {
                  foundMails = data.slice(-size);
                }

                tries++;
                console.log('Fetching all emails tries: ', tries);
                _context5.next = 3;
                break;

              case 15:
                _context5.next = 20;
                break;

              case 17:
                _context5.prev = 17;
                _context5.t0 = _context5['catch'](2);
                throw new Error('error fetching all mails', _context5.t0);

              case 20:
                return _context5.abrupt('return', foundMails);

              case 21:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this, [[2, 17]]);
      }));

      function getAll() {
        return _ref8.apply(this, arguments);
      }

      return getAll;
    }()
  }]);
  return MailBox;
}();

exports.default = MailBox;